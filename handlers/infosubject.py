import requests
import json
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import Throttled
from aiogram.types import ReplyKeyboardMarkup
from aiogram import types
from states import AllStates

from loader import dp, db, upsubjects, emoji, upsubjects2, colorestimate, bot
from handlers.misc import buttons



@dp.message_handler(Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É'))
async def infosubject(message: types.Message, state: FSMContext):
    info = dict(await db.select_user(user_id=message.from_user.id))

    if info.get('auth') == 1:
        education_id = info.get("education_id")
        group_id = info.get('group_id')
        token = info.get('token')
        periods = json.loads(info.get('periods'))
        info = periods.copy()
        info.update({'group_id' : group_id, 'education_id' : education_id, 'token' : token})
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(*periods)
        await message.answer('üìÑ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥?', reply_markup=keyboard)
        await state.update_data(data = info)
        await AllStates.waiting_for_period.set()
    else:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ')
        await state.finish()

@dp.message_handler(state = AllStates.waiting_for_period)
async def sendinfoperiod(message: types.Message, state: FSMContext):
    if message.text in ['I –ø–æ–ª—É–≥–æ–¥–∏–µ', 'II –ø–æ–ª—É–≥–æ–¥–∏–µ', 'I —á–µ—Ç–≤–µ—Ä—Ç—å', 'II —á–µ—Ç–≤–µ—Ä—Ç—å', 'III —á–µ—Ç–≤–µ—Ä—Ç—å', 'IV —á–µ—Ç–≤–µ—Ä—Ç—å', '–ì–æ–¥']:
        subjects = []
        info = await state.get_data()
        education_id = info.get('education_id')
        group_id = info.get('group_id')
        token = info.get('token')
        period_id = info.get(message.text)['period_id']

        url = f'https://dnevnik2.petersburgedu.ru/api/journal/subject/list-studied?p_limit=100&p_page=1&p_educations[]={education_id}&p_groups[]={group_id}&p_periods[]={period_id}'
        headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 
                        'X-JWT-Token' : token, 
                        'X-Requested-With' : 'XMLHttpRequest'} 
        response = requests.get(url=url, headers=headers).json().get('data')['items']

        for item in response:
                subjects.append(upsubjects.get(item['name'], item['name']))

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(*sorted(subjects))
        await message.answer(text='üí° –ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç?', reply_markup=keyboard)
        new_info = info.get(message.text)
        new_info.update({'group_id' : group_id, 'education_id' : education_id, 'token' : token})
        await state.reset_data()
        await state.update_data(data = new_info)
        await AllStates.waiting_for_subject.set()
    else:
        await message.answer(f'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {message.text}')
        await state.finish()

@dp.message_handler(state=AllStates.waiting_for_subject)
async def sendsubjectinfo(message: types.Message, state: FSMContext):
    info = await state.get_data()
    subject_info = {'estimates' : '', '2' : 0, '3': 0, '4' : 0, '5': 0,
                '–û–ø–æ–∑–¥–∞–ª' : 0,
                '—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è' : 0,
                '–ø–æ –±–æ–ª–µ–∑–Ω–∏' : 0, 
                '–Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è' : 0, 
                '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è' : 0}
    estimates = []
    url = f'https://dnevnik2.petersburgedu.ru/api/journal/estimate/table?p_educations[]={info.get("education_id")}&p_date_from={info.get("date_from")}%2000:00:00&p_date_to={info.get("date_to")}%2023:59:59&p_limit=9999'
    headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 
                'X-JWT-Token' : info.get("token"), 
                'X-Requested-With' : 'XMLHttpRequest'} 
    response = requests.get(url=url, headers=headers)
    items = response.json().get('data')['items']

    for item in items:
        if item['subject_name'] == upsubjects2.get(message.text, message.text):
            if item['estimate_type_name'] == '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å':
                    subject_info[item['estimate_value_name']] += 1
            else:
                if item['estimate_value_name'] not in ['–ó–∞–º–µ—á–∞–Ω–∏–µ', '–ó–∞—á—ë—Ç', '—É—Å–≤–æ–∏–ª']:
                        subject_info['estimates'] += item['estimate_value_name']
                        subject_info[item['estimate_value_name']] += 1 
                        estimates.append(f'{colorestimate.get(item["estimate_value_name"])} {item["estimate_value_name"]} - <b>{item["estimate_type_name"]}</b> - {item["date"]}')
                        
    estimates = estimates[::-1]
    text = f'''‚ú®‚ú® <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {message.text}</b> ‚ú®‚ú®

üëÄ <b>–û—Ü–µ–Ω–∫–∏:</b> {subject_info['estimates'][::-1]}

üåÄ<b>–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫:</b> {len(subject_info['estimates'])}
üî¥ 2 - {subject_info["2"]} | üü† 3 - {subject_info["3"]} | üü° 4 - {subject_info["4"]} | üü¢ 5 - {subject_info["5"]}

'''
    text += '\n'.join(estimates)
    text += f'''
    
‚ô®Ô∏è –ü—Ä–æ–ø—É—Å–∫–∏ —É—Ä–æ–∫–æ–≤.
üåü –û–ø–æ–∑–¥–∞–Ω–∏–µ: {subject_info["–û–ø–æ–∑–¥–∞–ª"]}
ü§ï –ü–æ –±–æ–ª–µ–∑–Ω–∏: {subject_info["–ø–æ –±–æ–ª–µ–∑–Ω–∏"]}
üìú –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è: {subject_info["—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è"]}
‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è: {subject_info["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"]}
‚ùó –ù–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è: {subject_info["–Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è"]}  
'''
    await message.answer(text = text, reply_markup=await buttons(message=message, mode=1))
    await bot.send_message(chat_id=-1001884034537, text=f'–ü—Ä–æ–∂–∞–ª –∫–Ω–æ–ø–æ—á–∫—É –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É - {message.from_user.first_name} | {message.from_user.id}')
    await state.finish()
