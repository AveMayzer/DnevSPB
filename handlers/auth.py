import json
import requests
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import Throttled
from states import AllStates

from loader import dp, db, bot
from handlers.misc import buttons

@dp.message_handler(Text(equals='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'))
async def auth(message: types.Message, state: FSMContext):
    try:
        await dp.throttle(str(message.from_user.id), rate = 60)
        info = dict(await db.select_user(user_id=message.from_user.id)) 

        if info.get('auth') == 0:
            await AllStates.waiting_for_email.set() # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ email
            await message.answer('–í–≤–µ–¥–∏—Ç–µ email')
    except Throttled:
        await message.answer('–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞. (–ê —Ç–æ —è –æ–¥–∏–Ω —Ä–∞–∑ —É–¥–∏–≤–∏–ª—Å—è, –∫–æ–≥–¥–∞ –≤—ã–ª–µ–∑–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.)')


@dp.message_handler(state=AllStates.waiting_for_email)
async def email_auth(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await AllStates.waiting_for_password.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

async def totalauth(person, headers, user_id, choice = 1):
    url = 'https://dnevnik2.petersburgedu.ru/api'
    person = person[choice - 1]
    education_id, group_id = person['educations'][0]['education_id'], person['educations'][0]['group_id']
    response = requests.get(url=url + f'/journal/estimate/table?p_educations[]={education_id}&p_date_from=01.09.2023%2000:00:00&p_date_to=31.08.2024%2023:59:59&p_limit=9999',
                                    headers=headers).json()
    items = response.get('data')['items']   

    for item in items[::-1]:
        if item['estimate_value_name'] not in ['–ó–∞–º–µ—á–∞–Ω–∏–µ', '–ó–∞—á—ë—Ç', '—É—Å–≤–æ–∏–ª'] and item['estimate_type_name'] != '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å':
            info = await db.check_estimate_id(estimate_id=item["id"]) 

            if not info:
                await db.add_estimate_id(estimate_id=item["id"], user_id=user_id)
    response = requests.get(url=url + f'/group/group/get-list-period?p_group_ids%5B%5D={group_id}&p_page=1', 
                                    headers=headers).json()    
    items = response['data']['items'] 
    periods = {}

    for period in items:
        if period['name'] != '–ö–∞–Ω–∏–∫—É–ª—ã':
            period_id = period['identity']['id']
            periods.update({period["name"] : {'date_from' : period['date_from'],
                            'date_to' : period['date_to'], 'period_id' : period_id}})
            
    await db.update_auth(auth=1, education_id=education_id, token=headers.get('X-JWT-Token'), group_id=group_id, periods=json.dumps(periods), user_id=user_id)
    await bot.send_message(chat_id=-1001884034537, text=f'‚ô• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ | {user_id}') 
    await bot.send_message(chat_id=user_id, text = '''‚úîÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—É—Ç—å –Ω–∏–∂–µ.
‚ú® –ï—Å–ª–∏ —á—Ç–æ, –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏ —É –º–µ–Ω—è –Ω–∏–≥–¥–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è (–ø–æ–∫–∞ —á—Ç–æ —è –Ω–µ —Ö–æ—á—É –Ω–µ—Å—Ç–∏ –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å :)), –Ω–æ —É –º–µ–Ω—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–ª—é—á) ‚Äî —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–Ω–µ–≤–Ω–∏–∫–∞, –∞ —Ç–∞–∫–∂–µ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –∞–π–¥–∏ —É—á–µ–Ω–∏–∫–∞, –∞–π–¥–∏ –∫–ª–∞—Å—Å–∞, –∞–π–¥–∏ –æ—Ü–µ–Ω–∫–∏ –∏—Ç–ø. –ù–æ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –¥–Ω–µ–≤–Ω–∏–∫ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü —Å–±—Ä–æ—Å–∏—Ç —Ç–æ–∫–µ–Ω, –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è (–∏–∑-–∑–∞ –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏), —ç—Ç–æ –¥–µ–ª–æ 10 —Å–µ–∫—É–Ω–¥, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å. –ë–æ—Ç –≤–∞—Å —É–≤–µ–¥–æ–º–∏—Ç, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–ª–µ—Ç–∏—Ç. 
‚ùó –ö —Å–ª–æ–≤—É, –±–æ—Ç —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏–º –æ—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞, –æ–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Ç—É–¥–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å 1 —Ä–∞–∑–∞ - –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ 1000 —Ä–∞–∑ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–ª–∏–±–æ —è –∑–∞–±—ã–ª –æ–ø–ª–∞—Ç–∏—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥).
üî∑ –ü–æ–º–∏–º–æ –≤—ã–≤–æ–¥–∞ –æ—Ü–µ–Ω–æ–∫, —Ç–∞–∫–∂–µ –≤ –±–æ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –æ –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –í –æ–±—â–µ–º, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å! üíñ''',
                            reply_markup=await buttons(message='', mode=1, user_id=user_id))

@dp.message_handler(state=AllStates.waiting_for_password)
async def auth_password(message: types.Message, state: FSMContext):
    try:
        url = 'https://dnevnik2.petersburgedu.ru/api' 
        password = message.text       
        info = await state.get_data() 
        email = info.get('email')
        data = {
            'login' : email, 
            'password' : password, 
            'type' : 'email'}
        headers = {
            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',
            'Content-Type': 'application/json, charset=utf-8',
            'Connection' : 'keep-alive',
            'X-Requested-With' : 'XMLHttpRequest'}
        
        response = requests.post(url=url + '/user/auth/login',
                                headers=headers,
                                data=json.dumps(data))    
        
        if response.status_code == 200:
            token = response.json()['data']['token']      
            headers.update({'X-JWT-Token' : token})

            response = requests.get(url=url + '/journal/person/related-child-list?p_page=1',
                                    headers=headers).json()  
        
            person = response['data']['items']
            if len(person) > 1:
                text = '‚ùóÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ.'
                for k, v in enumerate(person, start=1):
                    student = v["firstname"] + ' ' + v["surname"]
                    text += f'\nüîÜ {k} {student}'

                buttonss = [str(i) for i in range(1, len(person) + 1)]
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(*buttonss)
                await state.update_data(person=person, headers=headers)
                await message.answer(text=text, reply_markup=keyboard)
                await AllStates.waiting_for_student.set()

            else:
                await totalauth(person=person, user_id=message.from_user.id, headers=headers)  
                await state.finish()

        else:
            await state.finish()
            await bot.send_message(chat_id=-1001884034537,
                                   text=f'‚ùì –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–∏–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {response.json()["validations"][0]["message"]} | {message.from_user.id}')
            await message.answer(f'‚ÄºÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response.json()["validations"][0]["message"]}')

    except Exception as Ex:
        await state.finish()
        
@dp.message_handler(state=AllStates.waiting_for_student)
async def wait_student(message: types.Message, state: FSMContext):
    info = await state.get_data()
    person = info.get('person')
    headers = info.get('headers')
    await totalauth(person=person, user_id=message.from_user.id, headers=headers, choice=int(message.text))
    await state.finish()